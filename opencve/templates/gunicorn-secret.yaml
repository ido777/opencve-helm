apiVersion: v1
kind: Secret
metadata:
  name: gunicorn-config
type: Opaque
stringData:
  config.py: |+
    import os  
  
    bind = '0.0.0.0:8000'
    backlog = {{ .Values.gunicorn.backlog }}
    #
    ## Worker processes
    ##
    #
    #   workers - The number of worker processes that this server
    #   #       should keep alive for handling requests.
    #   #
    #   #       A positive integer generally in the 2-4 x $(NUM_CORES)
    #   #       range. You'll want to vary this a bit to find the best
    #   #       for your particular application's work load.
    #   #
    #   #   worker_class - The type of workers to use. The default
    #   #       sync class should handle most 'normal' types of work
    #   #       loads. You'll want to read
    #   #       http://docs.gunicorn.org/en/latest/design.html#choosing-a-worker-type
    #   #       for information on when you might want to choose one
    #   #       of the other worker classes.
    #   #
    #   #       A string referring to a Python path to a subclass of
    #   #       gunicorn.workers.base.Worker. The default provided values
    #   #       can be seen at
    #   #       http://docs.gunicorn.org/en/latest/settings.html#worker-class
    #   #
    #   #   worker_connections - For the eventlet and gevent worker classes
    #   #       this limits the maximum number of simultaneous clients that
    #   #       a single process can handle.
    #   #
    #   #       A positive integer generally set to around 1000.
    #   #
    #   #   timeout - If a worker does not notify the master process in this
    #   #       number of seconds it is killed and a new worker is spawned
    #   #       to replace it.
    #   #
    #   #       Generally set to thirty seconds. Only set this noticeably
    #   #       higher if you're sure of the repercussions for sync workers.
    #   #       For the non sync workers it just means that the worker
    #   #       process is still communicating and is not tied to the length
    #   #       of time required to handle a single request.
    #   #
    #   #   keepalive - The number of seconds to wait for the next request
    #   #       on a Keep-Alive HTTP connection.
    #   #
    #   #       A positive integer. Generally set in the 1-5 seconds range.
    #   #
    workers = {{ .Values.gunicorn.workers }}
    #workers = len(os.sched_getaffinity(0)) * 2 + 1
    worker_class = '{{ .Values.gunicorn.worker_class }}'
    worker_connections = {{ .Values.gunicorn.worker_connections }}
    graceful_timeout = {{ .Values.gunicorn.graceful_timeout }}
    timeout = {{ .Values.gunicorn.timeout }}
    keepalive = {{ .Values.gunicorn.keepalive }}
    #
    ##   spew - Install a trace function that spews every line of Python
    ##       that is executed when running the server. This is the
    ##       nuclear option.
    ##
    ##       True or False
    ##
    spew = '{{ .Values.gunicorn.spew }}'
    #   
    #   user - Switch worker processes to run as this user.
    #   #
    #   #       A valid user id (as an integer) or the name of a user that
    #   #       can be retrieved with a call to pwd.getpwnam(value) or None
    #   #       to not change the worker process user.
    #   #
    #   #   group - Switch worker process to run as this group.
    #   #
    #   #       A valid group id (as an integer) or the name of a user that
    #   #       can be retrieved with a call to pwd.getgrnam(value) or None
    #   #       to change the worker processes group.
    user = '{{ .Values.gunicorn.user }}'
    group = '{{ .Values.gunicorn.group }}'
    #
    ##   Logging
    ##
    ##   logfile - The path to a log file to write to.
    ##
    ##       A path string. "-" means log to stdout.
    ##
    ##   loglevel - The granularity of log output
    ##
    ##       A string of "debug", "info", "warning", "error", "critical"
    ##
    #
    errorlog = '-'
    loglevel = '{{ .Values.gunicorn.loglevel }}'
    accesslog = '-'
    access_log_format = '{{ .Values.gunicorn.access_log_format }}'
    #
    #
    max_requests = {{ .Values.gunicorn.max_requests }}
    max_requests_jitter = {{ .Values.gunicorn.max_requests_jitter }}
    preload_app = '{{ .Values.gunicorn.preload_app }}'
    threads = {{ .Values.gunicorn.threads }}
    
